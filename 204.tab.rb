#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
class TenderParser < Racc::Parser

module_eval(<<'...end 204.y/module_eval...', '204.y', 22)
require './lexer'

def parse(str)
  @q = EdiLexer.new.lex_str(str)
  do_parse

end

def next_token
  @q.shift
end

...end 204.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     9,    10,     7,     8,     6,    18,     4,     3,    12,     5,
     9,    10,     7,     8,     4,     3,    13,     5,     4,     3,
   nil,     5,     4,     3,   nil,     5,     4,     3,   nil,     5,
     4,     3,   nil,     5,     9,    10,     9,    10 ]

racc_action_check = [
    11,    11,    11,    11,     1,    11,     0,     0,     4,     0,
     2,     2,     2,     2,     3,     3,     6,     3,     7,     7,
   nil,     7,     8,     8,   nil,     8,     9,     9,   nil,     9,
    10,    10,   nil,    10,    14,    14,    15,    15 ]

racc_action_pointer = [
     0,     4,     7,     8,    -1,   nil,    16,    12,    16,    20,
    24,    -3,   nil,   nil,    31,    33,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -10,    -1,   -10,   -10,    -9,   -10,   -10,   -10,   -10,
   -10,   -10,    -8,    19,    -3,    -4,    -5,    -6,    -7 ]

racc_goto_table = [
     2,     1,   nil,    11,   nil,   nil,   nil,    14,    15,    16,
    17 ]

racc_goto_check = [
     2,     1,   nil,     2,   nil,   nil,   nil,     2,     2,     2,
     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_none,
  0, 11, :_reduce_2,
  3, 12, :_reduce_3,
  3, 12, :_reduce_4,
  3, 12, :_reduce_5,
  3, 12, :_reduce_6,
  3, 12, :_reduce_7,
  2, 12, :_reduce_8,
  1, 12, :_reduce_none ]

racc_reduce_n = 10

racc_shift_n = 19

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "(" => 7,
  ")" => 8,
  :NUMBER => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', '204.y', 9)
  def _reduce_2(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 11)
  def _reduce_3(val, _values, result)
     result += val[2]
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 12)
  def _reduce_4(val, _values, result)
     result -= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 13)
  def _reduce_5(val, _values, result)
     result *= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 14)
  def _reduce_6(val, _values, result)
     result /= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 15)
  def _reduce_7(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 16)
  def _reduce_8(val, _values, result)
     result = -val[1]
    result
  end
.,.,

# reduce 9 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class TenderParser


parser = TenderParser.new
puts "PARSING WOOOO"

test = "ISA*00*          *00*          *09*005070479ff    *ZZ*X0000X0        *931001*1020*U*00401*000848243*0*T*^~
GS*AA*6GQ9XQD*82MBE*20220307*050159*337658*T*004010~
ST*204*752456169~
B2******11~
B2A*00~
L11*360228*01~
G62*01*20220101~
MS3*1718*1~
LH6~
NTE**If we override the bandwidth, we can get to the SMTP capacitor through the cross~
N1*01*Anita John~
N3*1332 Smitham Drive~
N4~
N7**802204~
N7A~
N7B~
M7*645072~
S5*10*AL~
L11*27583*01~
G62*01*20220628~
LAD~
NTE**Use the auxiliary SDD system, then you can input the redundant hard drive!~
N1*01*Michal KristinsdÃ³ttir~
N3*1352 Fisher Light~
N4~
G61*1A*Yhudah Castillo~
OID*963550~
SE*10*65733208~
GE*10*337658~
IEA*1*000848243~
"

test_0 = "1 + 2 + 3"

puts parser.parse(test)
