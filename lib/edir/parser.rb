#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require './lexer'

class EdirParser < Racc::Parser

module_eval(<<'...end 204.y/module_eval...', '204.y', 12)
def parse(str)
  @q = Edir::Lexer.new.lex_str(str)
  do_parse
end

def next_token
  @q.shift
end
...end 204.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,     5,     6,     2,     3,     7,     8 ]

racc_action_check = [
     2,     2,     5,     5,     0,     1,     3,     4 ]

racc_action_pointer = [
     2,     5,    -4,     6,     4,    -2,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -4,    -4,    -4,    -4,    -4,    -4,    -3,    10,    -1,    -2 ]

racc_goto_table = [
     4,     1,   nil,     9 ]

racc_goto_check = [
     2,     1,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -2 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 7, :_reduce_1,
  2, 8, :_reduce_2,
  1, 8, :_reduce_3 ]

racc_reduce_n = 4

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :SEGSTART => 2,
  :SEGEND => 3,
  :ELEMSEP => 4,
  :ELEM => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEGSTART",
  "SEGEND",
  "ELEMSEP",
  "ELEM",
  "$start",
  "segment",
  "elem" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', '204.y', 2)
  def _reduce_1(val, _values, result)
     puts "1 #{val}"
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 3)
  def _reduce_2(val, _values, result)
     puts "2 #{val}"
    result
  end
.,.,

module_eval(<<'.,.,', '204.y', 4)
  def _reduce_3(val, _values, result)
     puts "3 #{val}"
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class EdirParser
