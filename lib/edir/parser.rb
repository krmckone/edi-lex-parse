#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require './lexer'

class Edir::Segment
  def initialize(data)
    @raw_data = data

    @segment_name = data.first
    @elements = []
    position = 1
    separators = 0
    @raw_data[1..].each do |element|
      if element == "*"
        separators += 1
        if separators % 2 == 0
          position += 1
        end
      else
        @elements.push([element, position])
      end
    end
  end

  # def inspect
  #   @raw_data
  # end
end

module Edir
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 48)
def initialize(debug: false)
  @yydebug = debug
end

def parse(str)
  @q = Edir::Lexer.new.lex_str(str)
  do_parse
end

def next_token
  @q.shift
end

def build_segment(data)
  Edir::Segment.new(data)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     8,     9,     8,     9,     8,     9,     3,     4,     3,
    10,    11 ]

racc_action_check = [
     3,     3,     3,     8,     8,     9,     9,     0,     1,     2,
     4,     6 ]

racc_action_pointer = [
     5,     8,     7,    -3,    10,   nil,     8,   nil,    -1,     1,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -8,    -8,    -2,    -8,    -8,    -1,    -8,    -4,    -8,    -7,
    14,    -3,    -5,    -6 ]

racc_goto_table = [
     6,     1,   nil,     5,   nil,    12,    13 ]

racc_goto_check = [
     3,     1,   nil,     1,   nil,     3,     3 ]

racc_goto_pointer = [
   nil,     1,   nil,    -3 ]

racc_goto_default = [
   nil,   nil,     2,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 7, :_reduce_1,
  1, 7, :_reduce_2,
  3, 8, :_reduce_3,
  2, 8, :_reduce_4,
  2, 9, :_reduce_5,
  2, 9, :_reduce_6,
  1, 9, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 14

racc_token_table = {
  false => 0,
  :error => 1,
  :SEGSTART => 2,
  :SEGEND => 3,
  :ELEMSEP => 4,
  :ELEM => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEGSTART",
  "SEGEND",
  "ELEMSEP",
  "ELEM",
  "$start",
  "segments",
  "segment",
  "elems" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_1(val, _values, result)
     return [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_2(val, _values, result)
     return val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_3(val, _values, result)
     return build_segment([val[0]] + val[1] + [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_4(val, _values, result)
     return build_segment(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_5(val, _values, result)
     return [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_6(val, _values, result)
     return [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_7(val, _values, result)
     return val
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Edir
